name: Random Interval Pinger

on:
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest

    steps:
      - name: Random Delay (simulate random interval)
        run: |
          RANDOM_SLEEP=$((RANDOM % 271))
          echo "Sleeping for $RANDOM_SLEEP seconds..."
          sleep $RANDOM_SLEEP

      - name: Run health checks in parallel with retry
        id: health
        run: |
          set -e

          declare -A endpoints=(
            ["Frontend Status Page"]="https://shinespot-marketplace.vercel.app"
            ["Global API"]="https://shinespot-api.onrender.com/health"
            ["Customers API"]="https://shinespot-api.onrender.com/api/customers/health"
            ["Products API"]="https://shinespot-api.onrender.com/api/products/health"
            ["Orders API"]="https://shinespot-api.onrender.com/api/orders/health"
            ["Auth API"]="https://shinespot-api.onrender.com/api/auth/health"
            ["WhatsApp Bot"]="https://whatsapp-bot-uh5a.onrender.com"
            ["Bailey Bot"]="https://bot-bailey.onrender.com"
          )

          mkdir -p status
          touch status/result.txt

          has_failure=0

          ping_with_retry() {
            local name=$1
            local url=$2
            local max_retries=3
            local delay=5

            for ((i=1; i<=max_retries; i++)); do
              response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$response" = "200" ]; then
                echo "✅ $name: Passed" >> status/result.txt
                return 0
              fi
              sleep $delay
            done

            echo "❌ $name: Failed" >> status/result.txt
            has_failure=1
            return 1
          }

          echo "ShineSpot Health Report" > status/result.txt
          echo "Run time: $(date -u)" >> status/result.txt
          echo "----------------------------" >> status/result.txt

          for name in "${!endpoints[@]}"; do
            ping_with_retry "$name" "${endpoints[$name]}" &
          done

          wait

          echo "has_failure=$has_failure" >> $GITHUB_ENV

      - name: Read report content
        id: report
        run: |
          {
            echo "body<<EOF"
            cat status/result.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Send Email Report (only on failure)
        if: env.has_failure == '1'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "❌ ShineSpot Health Check Failed"
          to: ${{ secrets.SMTP_USERNAME }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          content_type: text/plain
          body: ${{ steps.report.outputs.body }}
